#!/usr/bin/env python3
"""
Script para validar se o Docker funcionar√° corretamente em Linux
"""

import os
import sys

def check_dockerfile():
    """Verifica se o Dockerfile est√° correto para Linux"""
    print("=== VALIDA√á√ÉO DO DOCKERFILE PARA LINUX ===")
    
    issues = []
    
    # Verificar se Dockerfile existe
    if not os.path.exists('Dockerfile'):
        issues.append("‚ùå Dockerfile n√£o encontrado")
        return issues
    
    with open('Dockerfile', 'r') as f:
        content = f.read()
    
    # Verifica√ß√µes
    checks = [
        ("FROM python:", "‚úÖ Base image Python definida"),
        ("WORKDIR /app", "‚úÖ Diret√≥rio de trabalho definido"),
        ("ENV PYTHONDONTWRITEBYTECODE=1", "‚úÖ Vari√°vel de ambiente Python configurada"),
        ("ENV PYTHONUNBUFFERED=1", "‚úÖ Buffer Python desabilitado"),
        ("gcc", "‚úÖ Compilador GCC instalado"),
        ("curl", "‚úÖ Curl instalado para health check"),
        ("EXPOSE 8000", "‚úÖ Porta 8000 exposta"),
        ("uvicorn", "‚úÖ Comando uvicorn configurado"),
        ("0.0.0.0", "‚úÖ Host configurado para aceitar conex√µes externas")
    ]
    
    for check, message in checks:
        if check in content:
            print(message)
        else:
            issues.append(f"‚ùå {check} n√£o encontrado")
    
    return issues

def check_requirements():
    """Verifica se requirements.txt est√° adequado"""
    print("\n=== VALIDA√á√ÉO DO REQUIREMENTS.TXT ===")
    
    issues = []
    
    if not os.path.exists('requirements.txt'):
        issues.append("‚ùå requirements.txt n√£o encontrado")
        return issues
    
    with open('requirements.txt', 'r') as f:
        content = f.read()
    
    required_packages = [
        'fastapi',
        'uvicorn',
        'pandas',
        'numpy',
        'scikit-learn',
        'xgboost',
        'joblib',
        'pydantic'
    ]
    
    for package in required_packages:
        if package in content:
            print(f"‚úÖ {package} encontrado")
        else:
            issues.append(f"‚ùå {package} n√£o encontrado")
    
    return issues

def check_dockerignore():
    """Verifica se .dockerignore existe e est√° adequado"""
    print("\n=== VALIDA√á√ÉO DO .DOCKERIGNORE ===")
    
    issues = []
    
    if not os.path.exists('.dockerignore'):
        issues.append("‚ùå .dockerignore n√£o encontrado")
        return issues
    
    with open('.dockerignore', 'r') as f:
        content = f.read()
    
    important_ignores = [
        '__pycache__',
        '*.pyc',
        '.git',
        '.DS_Store',
        'venv/',
        '*.log'
    ]
    
    for ignore in important_ignores:
        if ignore in content:
            print(f"‚úÖ {ignore} ser√° ignorado")
        else:
            print(f"‚ö†Ô∏è  {ignore} n√£o est√° no .dockerignore")
    
    return issues

def check_application_files():
    """Verifica se os arquivos da aplica√ß√£o existem"""
    print("\n=== VALIDA√á√ÉO DOS ARQUIVOS DA APLICA√á√ÉO ===")
    
    issues = []
    
    required_files = [
        'fastapi_app.py',
        'main.py',
        # 'model_pipeline.py',  # Removido (obsoleto)
        'mlflow_config.py',
        'models/',
        'dataset_preparado.csv'
    ]
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} encontrado")
        else:
            issues.append(f"‚ùå {file_path} n√£o encontrado")
    
    return issues

def main():
    """Fun√ß√£o principal"""
    print("üêß VALIDA√á√ÉO DO DOCKER PARA LINUX üêß")
    print("=" * 50)
    
    all_issues = []
    
    # Executar verifica√ß√µes
    all_issues.extend(check_dockerfile())
    all_issues.extend(check_requirements())
    all_issues.extend(check_dockerignore())
    all_issues.extend(check_application_files())
    
    # Resultado final
    print("\n" + "=" * 50)
    print("üìã RESULTADO DA VALIDA√á√ÉO")
    print("=" * 50)
    
    if not all_issues:
        print("‚úÖ DOCKER FUNCIONAR√Å PERFEITAMENTE EM LINUX!")
        print("\nComandos para usar no Linux:")
        print("1. docker build -t decision-recruitment-ai .")
        print("2. docker run -d -p 8000:8000 --name decision-api decision-recruitment-ai")
        print("3. docker ps  # verificar se est√° rodando")
        print("4. curl http://localhost:8000/health  # testar API")
        return True
    else:
        print("‚ùå PROBLEMAS ENCONTRADOS:")
        for issue in all_issues:
            print(f"  {issue}")
        print("\nCorrija os problemas acima antes de usar no Linux.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
