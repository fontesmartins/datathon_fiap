#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Teste Avan√ßado da API Decision Recruitment AI
Testa todos os endpoints com valida√ß√£o de respostas
"""

import requests
import json
import time
from datetime import datetime
from typing import Dict, Any, List

class APITester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        self.results = []
        
    def test_endpoint(self, method: str, endpoint: str, data: Dict = None, 
                     expected_status: int = 200, description: str = "") -> Dict[str, Any]:
        """Testa um endpoint espec√≠fico"""
        url = f"{self.base_url}{endpoint}"
        
        print(f"\nüß™ Testando: {description}")
        print(f"   {method} {url}")
        
        try:
            if method.upper() == "GET":
                response = self.session.get(url, timeout=10)
            elif method.upper() == "POST":
                response = self.session.post(
                    url, 
                    json=data, 
                    headers={"Content-Type": "application/json"},
                    timeout=10
                )
            else:
                raise ValueError(f"M√©todo {method} n√£o suportado")
            
            result = {
                "endpoint": endpoint,
                "method": method,
                "description": description,
                "status_code": response.status_code,
                "success": response.status_code == expected_status,
                "response_time": response.elapsed.total_seconds(),
                "timestamp": datetime.now().isoformat()
            }
            
            try:
                result["response_data"] = response.json()
            except:
                result["response_data"] = response.text
            
            if result["success"]:
                print(f"   ‚úÖ Sucesso ({result['response_time']:.3f}s)")
                if isinstance(result["response_data"], dict) and "status" in result["response_data"]:
                    print(f"   üìä Status: {result['response_data']['status']}")
            else:
                print(f"   ‚ùå Erro - Status: {response.status_code}")
                print(f"   üìÑ Resposta: {result['response_data']}")
            
            self.results.append(result)
            return result
            
        except requests.exceptions.RequestException as e:
            error_result = {
                "endpoint": endpoint,
                "method": method,
                "description": description,
                "error": str(e),
                "success": False,
                "timestamp": datetime.now().isoformat()
            }
            print(f"   ‚ùå Erro de conex√£o: {e}")
            self.results.append(error_result)
            return error_result
    
    def test_health_check(self):
        """Testa o health check"""
        return self.test_endpoint(
            "GET", "/health", 
            description="Health Check"
        )
    
    def test_model_info(self):
        """Testa informa√ß√µes do modelo"""
        return self.test_endpoint(
            "GET", "/model_info",
            description="Informa√ß√µes do Modelo"
        )
    
    def test_feature_importance(self):
        """Testa import√¢ncia das features"""
        return self.test_endpoint(
            "GET", "/feature_importance",
            description="Import√¢ncia das Features"
        )
    
    def test_mlflow_info(self):
        """Testa informa√ß√µes do MLflow"""
        return self.test_endpoint(
            "GET", "/mlflow_info",
            description="Informa√ß√µes do MLflow"
        )
    
    def test_prediction(self, candidate_data: Dict, job_data: Dict, description: str):
        """Testa predi√ß√£o individual"""
        data = {
            "candidate": candidate_data,
            "job": job_data
        }
        return self.test_endpoint(
            "POST", "/predict", data,
            description=description
        )
    
    def test_batch_prediction(self, candidates: List[Dict], job_data: Dict, description: str):
        """Testa predi√ß√£o em lote"""
        data = {
            "candidates": candidates,
            "job": job_data
        }
        return self.test_endpoint(
            "POST", "/predict_batch", data,
            description=description
        )
    
    def run_all_tests(self):
        """Executa todos os testes"""
        print("üöÄ Iniciando Testes da API Decision Recruitment AI")
        print(f"üìç URL Base: {self.base_url}")
        print("=" * 60)
        
        # Testes b√°sicos
        self.test_health_check()
        self.test_model_info()
        self.test_feature_importance()
        self.test_mlflow_info()
        
        # Dados de teste
        candidate_python = {
            "nome": "Jo√£o Silva",
            "nivel_profissional_candidato": "S√™nior",
            "nivel_ingles_candidato": "Avan√ßado",
            "nivel_espanhol_candidato": "Intermedi√°rio",
            "cv_text": "Desenvolvedor Python com 5 anos de experi√™ncia em desenvolvimento web, APIs REST, Django, Flask, PostgreSQL, AWS, Docker, Kubernetes. Certificado AWS Solutions Architect.",
            "pcd": "N√£o",
            "remuneracao": 12000,
            "estado": "S√£o Paulo"
        }
        
        job_python = {
            "titulo_vaga": "Desenvolvedor Python S√™nior",
            "nivel_profissional_vaga": "S√™nior",
            "nivel_ingles_vaga": "Avan√ßado",
            "nivel_espanhol_vaga": "Intermedi√°rio",
            "vaga_sap": "N√£o",
            "competencia_tecnicas": "Python, Django, Flask, PostgreSQL, AWS, Docker, Kubernetes, APIs REST",
            "cliente": "TechCorp",
            "tipo_contratacao": "CLT Full"
        }
        
        candidate_sap = {
            "nome": "Maria Santos",
            "nivel_profissional_candidato": "Pleno",
            "nivel_ingles_candidato": "Fluente",
            "nivel_espanhol_candidato": "Fluente",
            "cv_text": "Analista de Sistemas com experi√™ncia em SAP, SQL Server, Oracle, desenvolvimento de relat√≥rios, an√°lise de dados, Excel avan√ßado, VBA, Power BI.",
            "pcd": "N√£o",
            "remuneracao": 8000,
            "estado": "S√£o Paulo"
        }
        
        job_sap = {
            "titulo_vaga": "Analista SAP Pleno",
            "nivel_profissional_vaga": "Pleno",
            "nivel_ingles_vaga": "Fluente",
            "nivel_espanhol_vaga": "Fluente",
            "vaga_sap": "Sim",
            "competencia_tecnicas": "SAP, SQL, Oracle, Excel, VBA, Power BI, An√°lise de Dados",
            "cliente": "Morris, Moran and Dodson",
            "tipo_contratacao": "CLT Full"
        }
        
        # Testes de predi√ß√£o
        self.test_prediction(candidate_python, job_python, "Predi√ß√£o - Desenvolvedor Python")
        self.test_prediction(candidate_sap, job_sap, "Predi√ß√£o - Analista SAP")
        
        # Teste de predi√ß√£o em lote
        candidates_batch = [
            {
                "nome": "Ana Costa",
                "nivel_profissional_candidato": "J√∫nior",
                "nivel_ingles_candidato": "B√°sico",
                "nivel_espanhol_candidato": "Nenhum",
                "cv_text": "Desenvolvedora iniciante com conhecimento em Python, HTML, CSS, JavaScript.",
                "pcd": "N√£o",
                "remuneracao": 3000,
                "estado": "S√£o Paulo"
            },
            {
                "nome": "Carlos Oliveira",
                "nivel_profissional_candidato": "S√™nior",
                "nivel_ingles_candidato": "Fluente",
                "nivel_espanhol_candidato": "Avan√ßado",
                "cv_text": "Arquiteto de Software com 8 anos de experi√™ncia em Java, Spring Boot, Microservices, AWS, Docker, Kubernetes.",
                "pcd": "N√£o",
                "remuneracao": 15000,
                "estado": "S√£o Paulo"
            }
        ]
        
        job_batch = {
            "titulo_vaga": "Desenvolvedor Java S√™nior",
            "nivel_profissional_vaga": "S√™nior",
            "nivel_ingles_vaga": "Fluente",
            "nivel_espanhol_vaga": "Avan√ßado",
            "vaga_sap": "N√£o",
            "competencia_tecnicas": "Java, Spring Boot, Microservices, AWS, Docker, Kubernetes",
            "cliente": "TechCorp",
            "tipo_contratacao": "CLT Full"
        }
        
        self.test_batch_prediction(candidates_batch, job_batch, "Predi√ß√£o em Lote")
        
        # Resumo dos resultados
        self.print_summary()
    
    def print_summary(self):
        """Imprime resumo dos testes"""
        print("\n" + "=" * 60)
        print("üìä RESUMO DOS TESTES")
        print("=" * 60)
        
        total_tests = len(self.results)
        successful_tests = sum(1 for r in self.results if r.get("success", False))
        failed_tests = total_tests - successful_tests
        
        print(f"‚úÖ Testes bem-sucedidos: {successful_tests}")
        print(f"‚ùå Testes falharam: {failed_tests}")
        print(f"üìà Taxa de sucesso: {(successful_tests/total_tests)*100:.1f}%")
        
        if failed_tests > 0:
            print("\n‚ùå Testes que falharam:")
            for result in self.results:
                if not result.get("success", False):
                    print(f"   - {result['description']}: {result.get('error', 'Status code incorreto')}")
        
        # Estat√≠sticas de tempo
        response_times = [r.get("response_time", 0) for r in self.results if "response_time" in r]
        if response_times:
            avg_time = sum(response_times) / len(response_times)
            max_time = max(response_times)
            min_time = min(response_times)
            print(f"\n‚è±Ô∏è  Tempo de resposta:")
            print(f"   - M√©dia: {avg_time:.3f}s")
            print(f"   - M√°ximo: {max_time:.3f}s")
            print(f"   - M√≠nimo: {min_time:.3f}s")
        
        print(f"\nüìö Documenta√ß√£o dispon√≠vel em: {self.base_url}/docs")
        print(f"üîç ReDoc dispon√≠vel em: {self.base_url}/redoc")
        
        # Salvar resultados em arquivo
        with open("test_results.json", "w") as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        print(f"üíæ Resultados salvos em: test_results.json")

def main():
    import sys
    
    # URL base da API
    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8000"
    
    # Executar testes
    tester = APITester(base_url)
    tester.run_all_tests()

if __name__ == "__main__":
    main()
